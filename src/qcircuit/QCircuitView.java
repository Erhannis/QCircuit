/*
 * QCircuitView.java
 */

package qcircuit;

import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * The application's main frame.
 */
public class QCircuitView extends FrameView {
    public ArrayList<QCircuit> circuits = new ArrayList<QCircuit>();
    
    // Test run things.
    public ArrayList<QState> states;
    
    public QViewport vp;
    
    public void init() {
        
    }    
    
    public QCircuitView(SingleFrameApplication app) {
        super(app);
        initComponents();
        
        this.vp = new QViewport(this);
        this.jSplitPane2.setRightComponent(vp);
        
        init();
        
        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = QCircuitApp.getApplication().getMainFrame();
            aboutBox = new QCircuitAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        QCircuitApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        mainPanel = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        panelToolbar = new javax.swing.JPanel();
        radioAddCircuit = new javax.swing.JRadioButton();
        radioAddCNot = new javax.swing.JRadioButton();
        boxTestRun = new javax.swing.JCheckBox();
        radioToggle = new javax.swing.JRadioButton();
        radioSelectCircuit = new javax.swing.JRadioButton();
        radioSelectGate = new javax.swing.JRadioButton();
        radioAddHadamard = new javax.swing.JRadioButton();
        radioProbRound = new javax.swing.JRadioButton();
        radioProb = new javax.swing.JRadioButton();
        radioMeasure = new javax.swing.JRadioButton();
        radioAddMatrixGate = new javax.swing.JRadioButton();
        radioStateProbe = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        panelProperties = new javax.swing.JPanel();
        btnDelete = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        mitemHelp = new javax.swing.JMenuItem();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        groupTools = new javax.swing.ButtonGroup();
        groupRunMeasureMethod = new javax.swing.ButtonGroup();

        mainPanel.setName("mainPanel"); // NOI18N

        jSplitPane1.setDividerLocation(400);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setName("jSplitPane1"); // NOI18N

        jSplitPane2.setDividerLocation(150);
        jSplitPane2.setName("jSplitPane2"); // NOI18N

        panelToolbar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelToolbar.setName("panelToolbar"); // NOI18N

        groupTools.add(radioAddCircuit);
        radioAddCircuit.setSelected(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(qcircuit.QCircuitApp.class).getContext().getResourceMap(QCircuitView.class);
        radioAddCircuit.setText(resourceMap.getString("radioAddCircuit.text")); // NOI18N
        radioAddCircuit.setName("radioAddCircuit"); // NOI18N

        groupTools.add(radioAddCNot);
        radioAddCNot.setText(resourceMap.getString("radioAddCNot.text")); // NOI18N
        radioAddCNot.setName("radioAddCNot"); // NOI18N

        boxTestRun.setText(resourceMap.getString("boxTestRun.text")); // NOI18N
        boxTestRun.setName("boxTestRun"); // NOI18N
        boxTestRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxTestRunActionPerformed(evt);
            }
        });

        groupTools.add(radioToggle);
        radioToggle.setText(resourceMap.getString("radioToggle.text")); // NOI18N
        radioToggle.setName("radioToggle"); // NOI18N

        groupTools.add(radioSelectCircuit);
        radioSelectCircuit.setText(resourceMap.getString("radioSelectCircuit.text")); // NOI18N
        radioSelectCircuit.setName("radioSelectCircuit"); // NOI18N

        groupTools.add(radioSelectGate);
        radioSelectGate.setText(resourceMap.getString("radioSelectGate.text")); // NOI18N
        radioSelectGate.setName("radioSelectGate"); // NOI18N

        groupTools.add(radioAddHadamard);
        radioAddHadamard.setText(resourceMap.getString("radioAddHadamard.text")); // NOI18N
        radioAddHadamard.setName("radioAddHadamard"); // NOI18N

        groupRunMeasureMethod.add(radioProbRound);
        radioProbRound.setSelected(true);
        radioProbRound.setText(resourceMap.getString("radioProbRound.text")); // NOI18N
        radioProbRound.setName("radioProbRound"); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, boxTestRun, org.jdesktop.beansbinding.ELProperty.create("${selected}"), radioProbRound, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        radioProbRound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioProbRoundActionPerformed(evt);
            }
        });

        groupRunMeasureMethod.add(radioProb);
        radioProb.setText(resourceMap.getString("radioProb.text")); // NOI18N
        radioProb.setName("radioProb"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, boxTestRun, org.jdesktop.beansbinding.ELProperty.create("${selected}"), radioProb, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        radioProb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioProbActionPerformed(evt);
            }
        });

        groupRunMeasureMethod.add(radioMeasure);
        radioMeasure.setText(resourceMap.getString("radioMeasure.text")); // NOI18N
        radioMeasure.setName("radioMeasure"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, boxTestRun, org.jdesktop.beansbinding.ELProperty.create("${selected}"), radioMeasure, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        radioMeasure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioMeasureActionPerformed(evt);
            }
        });

        groupTools.add(radioAddMatrixGate);
        radioAddMatrixGate.setText(resourceMap.getString("radioAddMatrixGate.text")); // NOI18N
        radioAddMatrixGate.setName("radioAddMatrixGate"); // NOI18N
        radioAddMatrixGate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioAddMatrixGateActionPerformed(evt);
            }
        });

        groupTools.add(radioStateProbe);
        radioStateProbe.setText(resourceMap.getString("radioStateProbe.text")); // NOI18N
        radioStateProbe.setName("radioStateProbe"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, boxTestRun, org.jdesktop.beansbinding.ELProperty.create("${selected}"), radioStateProbe, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout panelToolbarLayout = new javax.swing.GroupLayout(panelToolbar);
        panelToolbar.setLayout(panelToolbarLayout);
        panelToolbarLayout.setHorizontalGroup(
            panelToolbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelToolbarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelToolbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radioAddCircuit)
                    .addComponent(radioAddCNot)
                    .addComponent(radioToggle)
                    .addComponent(radioSelectGate)
                    .addComponent(radioAddHadamard)
                    .addComponent(radioSelectCircuit)
                    .addComponent(radioAddMatrixGate)
                    .addComponent(boxTestRun)
                    .addGroup(panelToolbarLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(panelToolbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radioProb)
                            .addComponent(radioProbRound)
                            .addComponent(radioMeasure)))
                    .addComponent(radioStateProbe))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelToolbarLayout.setVerticalGroup(
            panelToolbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelToolbarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radioAddCircuit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioAddCNot)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioAddHadamard)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioAddMatrixGate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioToggle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioSelectCircuit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioSelectGate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioStateProbe)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(boxTestRun)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioProbRound)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioProb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioMeasure)
                .addContainerGap())
        );

        jSplitPane2.setLeftComponent(panelToolbar);

        jPanel3.setName("jPanel3"); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 679, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        jSplitPane2.setRightComponent(jPanel3);

        jSplitPane1.setTopComponent(jSplitPane2);

        panelProperties.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelProperties.setName("panelProperties"); // NOI18N

        btnDelete.setText(resourceMap.getString("btnDelete.text")); // NOI18N
        btnDelete.setName("btnDelete"); // NOI18N
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelPropertiesLayout = new javax.swing.GroupLayout(panelProperties);
        panelProperties.setLayout(panelPropertiesLayout);
        panelPropertiesLayout.setHorizontalGroup(
            panelPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPropertiesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnDelete)
                .addContainerGap(759, Short.MAX_VALUE))
        );
        panelPropertiesLayout.setVerticalGroup(
            panelPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPropertiesLayout.createSequentialGroup()
                .addContainerGap(154, Short.MAX_VALUE)
                .addComponent(btnDelete)
                .addContainerGap())
        );

        jSplitPane1.setRightComponent(panelProperties);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 835, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 606, Short.MAX_VALUE)
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(qcircuit.QCircuitApp.class).getContext().getActionMap(QCircuitView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        mitemHelp.setText(resourceMap.getString("mitemHelp.text")); // NOI18N
        mitemHelp.setName("mitemHelp"); // NOI18N
        mitemHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitemHelpActionPerformed(evt);
            }
        });
        helpMenu.add(mitemHelp);

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setComponent(mainPanel);
        setMenuBar(menuBar);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    public boolean isTestRun = false;
    
private void boxTestRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxTestRunActionPerformed
    isTestRun = boxTestRun.isSelected();
    if (isTestRun) {
        initTestRun();
    }
    for (int i = 0; i < circuits.size(); i++) {
        circuits.get(i).switchRunMode(isTestRun);
    }
    vp.repaintVP();
}//GEN-LAST:event_boxTestRunActionPerformed

private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
    if (groupTools.isSelected(radioSelectCircuit.getModel())) {
        if (vp.selectedCircuit != null) {
            int index = circuits.indexOf(vp.selectedCircuit);
            if (index == -1) {
                vp.selectedCircuit.color = QCircuit.COLOR_UNSELECTED;
                if (vp.selectedGate != null) {
                    vp.selectedGate.setSelected(false);
                }
                vp.selectedCircuit = null;
                vp.selectedGate = null;
                vp.repaintVP();
                return;
            }
            circuits.remove(index);
            if (states != null && states.size() > index) {
                states.remove(index);
            }
            vp.selectedCircuit = null;
            vp.selectedGate = null;
            vp.repaintVP();
        }
    } else if (groupTools.isSelected(radioSelectGate.getModel())) {
        if (vp.selectedCircuit != null && vp.selectedGate != null) {
            int index = vp.selectedCircuit.gates.indexOf(vp.selectedGate);
            if (index == -1) {
                vp.selectedCircuit = null;
                vp.selectedGate = null;
                vp.repaintVP();
                return;
            }
            vp.selectedCircuit.gates.remove(index);
            vp.selectedGate = null;            
            vp.repaintVP();
        }
    } else {
        
    }
}//GEN-LAST:event_btnDeleteActionPerformed

    public ComplexMatrix currentGateMatrix = null;
    public int matrixBits = -1;

private void radioAddMatrixGateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioAddMatrixGateActionPerformed
    String input = JOptionPane.showInputDialog("Please input the matrix in the form of either\none list of 2^(2n) real numbers, separated by semicolons, or\ntwo such lists (real and complex coefficients), separated from each other by a colon.", null);
    String[] strings = input.split("\\|");
    if (strings.length == 1) {
        MatrixGate matrixGate = new MatrixGate(strings[0]);
        currentGateMatrix = matrixGate.matrix;
        matrixBits = matrixGate.bits;
    } else if (strings.length == 2) {
        MatrixGate matrixGate = new MatrixGate(strings[0], strings[1]);
        currentGateMatrix = matrixGate.matrix;
        matrixBits = matrixGate.bits;
    } else {
        JOptionPane.showMessageDialog(null, "Your input registers more than one | (or less than 0?).  This is invalid.", input, busyIconIndex);
    }
}//GEN-LAST:event_radioAddMatrixGateActionPerformed

private void radioProbRoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioProbRoundActionPerformed
    vp.repaintVP();
}//GEN-LAST:event_radioProbRoundActionPerformed

private void radioProbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioProbActionPerformed
    vp.repaintVP();
}//GEN-LAST:event_radioProbActionPerformed

private void radioMeasureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioMeasureActionPerformed
    vp.repaintVP();
}//GEN-LAST:event_radioMeasureActionPerformed

private void mitemHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitemHelpActionPerformed
    
}//GEN-LAST:event_mitemHelpActionPerformed

public void deleteAction() {
    this.btnDeleteActionPerformed(null);
}

public void initTestRun() {
    this.states = new ArrayList<QState>();
    for (int i = 0; i < circuits.size(); i++) {
        QState s = new QState(circuits.get(i).bits);
        s.initZeros();
        this.states.add(s);
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox boxTestRun;
    public javax.swing.JButton btnDelete;
    public javax.swing.ButtonGroup groupRunMeasureMethod;
    public javax.swing.ButtonGroup groupTools;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem mitemHelp;
    private javax.swing.JPanel panelProperties;
    private javax.swing.JPanel panelToolbar;
    public javax.swing.JRadioButton radioAddCNot;
    public javax.swing.JRadioButton radioAddCircuit;
    public javax.swing.JRadioButton radioAddHadamard;
    public javax.swing.JRadioButton radioAddMatrixGate;
    public javax.swing.JRadioButton radioMeasure;
    public javax.swing.JRadioButton radioProb;
    public javax.swing.JRadioButton radioProbRound;
    public javax.swing.JRadioButton radioSelectCircuit;
    public javax.swing.JRadioButton radioSelectGate;
    public javax.swing.JRadioButton radioStateProbe;
    public javax.swing.JRadioButton radioToggle;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
}
