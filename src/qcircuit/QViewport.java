/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * QViewport.java
 *
 * Created on Nov 1, 2012, 6:08:18 PM
 */
package qcircuit;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputMethodEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.geom.Ellipse2D;
import java.text.NumberFormat;
import java.util.Arrays;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;

/**
 *
 * @author erhannis
 */
public class QViewport extends javax.swing.JPanel {
    
    public QCircuitView parent;
    public double xTrans = 0;
    public double yTrans = 0;
    public double xScale = 1;
    public double yScale = 1;
    public Ellipse2D.Double origin = new Ellipse2D.Double(-4, -4, 8, 8);
    public int mouseWasX = -1;
    public int mouseWasY = -1;
    
    public static final double PRESCALE_FACTOR = -0.2;
    public static final double SCALE_BASE = 2;

    public static final Color COLOR_BACKGROUND = Color.gray;
    public static final Color COLOR_ORIGIN = Color.black;
    public static final Color COLOR_NODE = Color.blue;
    public static final Color COLOR_SELNODE = Color.green.darker();
    public static final Color COLOR_WIRE = Color.white;    
    public static final Color COLOR_GATE = Color.orange;
    public static final Color COLOR_RUN = Color.white;
    
    /** Creates new form QViewport */
    public QViewport(QCircuitView parent) {
        this.parent = parent;
        
        initComponents();
        init();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setName("Form"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 422, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 327, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    protected void paintComponent(Graphics g1) {
        NumberFormat nf = NumberFormat.getInstance();
        nf.setMaximumFractionDigits(2);
        super.paintComponent(g1);
        Graphics2D g = (Graphics2D) g1;
        g.setColor(COLOR_BACKGROUND);
        g.fillRect(0, 0, this.getWidth(), this.getHeight());
        g.setColor(COLOR_ORIGIN);
        //TODO Fix scaling to be more natural
        g.translate(xTrans, yTrans);
        g.scale(xScale, yScale);
        g.draw(origin);
        for (QCircuit c : parent.circuits) {
            g.setColor(c.color);
            for (int i = 0; i < c.bits; i++) {                
                g.draw(new java.awt.geom.Line2D.Double(c.origin.x, c.origin.y + (i * c.wireSpace), c.origin.x + (c.excessWire * 2) + (c.gateSpace * (c.gates.size() > 0 ? c.gates.size() - 1 : 0)), c.origin.y + (i * c.wireSpace)));
            }
            for (int i = 0; i < c.gates.size(); i++) {
                IQGate gt = c.gates.get(i);
                g.setColor(gt.getColor());
                if (gt instanceof CNot) {
                    CNot cn = (CNot)gt;
                    for (int j = 1; j < cn.bits.length; j++) {
                        g.draw(new java.awt.geom.Line2D.Double(c.origin.x + c.excessWire + (c.gateSpace * i), c.origin.y + (cn.bits[j] * c.wireSpace), c.origin.x + c.excessWire + (c.gateSpace * i), c.origin.y + (cn.bits[0] * c.wireSpace)));
                        g.fill(new java.awt.geom.Ellipse2D.Double(c.origin.x + c.excessWire + (c.gateSpace * i) - (c.gateSize * 0.25), c.origin.y + (cn.bits[j] * c.wireSpace) - (c.gateSize * 0.25), c.gateSize * 0.5, c.gateSize * 0.5));
                    }
                    if (cn.bits.length > 0) {
                        g.draw(new java.awt.geom.Ellipse2D.Double(c.origin.x + c.excessWire + (c.gateSpace * i) - (c.gateSize * 0.5), c.origin.y + (cn.bits[0] * c.wireSpace) - (c.gateSize * 0.5), c.gateSize, c.gateSize));
                        g.draw(new java.awt.geom.Line2D.Double(c.origin.x + c.excessWire + (c.gateSpace * i), c.origin.y + (cn.bits[0] * c.wireSpace) - (c.gateSize * 0.5), c.origin.x + c.excessWire + (c.gateSpace * i), c.origin.y + (cn.bits[0] * c.wireSpace) + (c.gateSize * 0.5)));
                        g.draw(new java.awt.geom.Line2D.Double(c.origin.x + c.excessWire + (c.gateSpace * i) - (c.gateSize * 0.5), c.origin.y + (cn.bits[0] * c.wireSpace), c.origin.x + c.excessWire + (c.gateSpace * i) + (c.gateSize * 0.5), c.origin.y + (cn.bits[0] * c.wireSpace)));
                    }
                } else if (gt instanceof Hadamard){
                    Hadamard cn = (Hadamard)gt;
                    g.setColor(COLOR_BACKGROUND);
                    g.fill(new java.awt.geom.Rectangle2D.Double(c.origin.x + c.excessWire + (c.gateSpace * i) - (c.gateSize * 0.5), c.origin.y + (cn.bit * c.wireSpace) - (c.gateSize * 0.5), c.gateSize, c.gateSize));
                    g.setColor(gt.getColor());
                    g.draw(new java.awt.geom.Rectangle2D.Double(c.origin.x + c.excessWire + (c.gateSpace * i) - (c.gateSize * 0.5), c.origin.y + (cn.bit * c.wireSpace) - (c.gateSize * 0.5), c.gateSize, c.gateSize));
                    g.draw(new java.awt.geom.Line2D.Double(c.origin.x + c.excessWire + (c.gateSpace * i) - (c.gateSize * 0.2), c.origin.y + (cn.bit * c.wireSpace) - (c.gateSize * 0.3), c.origin.x + c.excessWire + (c.gateSpace * i) - (c.gateSize * 0.2), c.origin.y + (cn.bit * c.wireSpace) + (c.gateSize * 0.3)));
                    g.draw(new java.awt.geom.Line2D.Double(c.origin.x + c.excessWire + (c.gateSpace * i) + (c.gateSize * 0.2), c.origin.y + (cn.bit * c.wireSpace) - (c.gateSize * 0.3), c.origin.x + c.excessWire + (c.gateSpace * i) + (c.gateSize * 0.2), c.origin.y + (cn.bit * c.wireSpace) + (c.gateSize * 0.3)));
                    g.draw(new java.awt.geom.Line2D.Double(c.origin.x + c.excessWire + (c.gateSpace * i) - (c.gateSize * 0.2), c.origin.y + (cn.bit * c.wireSpace), c.origin.x + c.excessWire + (c.gateSpace * i) + (c.gateSize * 0.2), c.origin.y + (cn.bit * c.wireSpace)));
                } else if (gt instanceof PauliZ){
                    PauliZ cn = (PauliZ)gt;
                    g.setColor(COLOR_BACKGROUND);
                    g.fill(new java.awt.geom.Rectangle2D.Double(c.origin.x + c.excessWire + (c.gateSpace * i) - (c.gateSize * 0.5), c.origin.y + (cn.bit * c.wireSpace) - (c.gateSize * 0.5), c.gateSize, c.gateSize));
                    g.setColor(gt.getColor());
                    g.draw(new java.awt.geom.Rectangle2D.Double(c.origin.x + c.excessWire + (c.gateSpace * i) - (c.gateSize * 0.5), c.origin.y + (cn.bit * c.wireSpace) - (c.gateSize * 0.5), c.gateSize, c.gateSize));
                    g.draw(new java.awt.geom.Line2D.Double(c.origin.x + c.excessWire + (c.gateSpace * i) - (c.gateSize * 0.2), c.origin.y + (cn.bit * c.wireSpace) - (c.gateSize * 0.3), c.origin.x + c.excessWire + (c.gateSpace * i) + (c.gateSize * 0.2), c.origin.y + (cn.bit * c.wireSpace) - (c.gateSize * 0.3)));
                    g.draw(new java.awt.geom.Line2D.Double(c.origin.x + c.excessWire + (c.gateSpace * i) - (c.gateSize * 0.2), c.origin.y + (cn.bit * c.wireSpace) + (c.gateSize * 0.3), c.origin.x + c.excessWire + (c.gateSpace * i) + (c.gateSize * 0.2), c.origin.y + (cn.bit * c.wireSpace) + (c.gateSize * 0.3)));
                    g.draw(new java.awt.geom.Line2D.Double(c.origin.x + c.excessWire + (c.gateSpace * i) + (c.gateSize * 0.2), c.origin.y + (cn.bit * c.wireSpace) - (c.gateSize * 0.3), c.origin.x + c.excessWire + (c.gateSpace * i) - (c.gateSize * 0.2), c.origin.y + (cn.bit * c.wireSpace) + (c.gateSize * 0.3)));
                } else if (gt instanceof MatrixGate){
                    MatrixGate mg = (MatrixGate)gt;
                    g.setColor(COLOR_BACKGROUND);
                    g.fill(new java.awt.geom.Rectangle2D.Double(c.origin.x + c.excessWire + (c.gateSpace * i) - (c.gateSize * 0.5), c.origin.y - (c.gateSize * 0.5), c.gateSize, c.gateSize + ((c.bits - 1) * c.wireSpace)));
                    g.setColor(gt.getColor());
                    g.draw(new java.awt.geom.Rectangle2D.Double(c.origin.x + c.excessWire + (c.gateSpace * i) - (c.gateSize * 0.5), c.origin.y - (c.gateSize * 0.5), c.gateSize, c.gateSize + ((c.bits - 1) * c.wireSpace)));
                } else {
                    
                }
            }
        }
        if (parent.isTestRun) {
            for (int ci = 0; ci < parent.circuits.size(); ci++) {
                QCircuit c = parent.circuits.get(ci);
                QState s = parent.states.get(ci);
                QState s2 = s.copy();
                int[] bits = s.rMeasure();
                double endx = c.origin.x;
                for (int i = 0; i < c.bits; i++) {
                    double endy = c.origin.y + (c.wireSpace * i);
                    g.setColor(COLOR_BACKGROUND);
                    g.fill(new java.awt.geom.Ellipse2D.Double(c.origin.x - (c.gateSize * 0.5), c.origin.y + (i * c.wireSpace) - (c.gateSize * 0.5), c.gateSize, c.gateSize));
                    g.setColor(COLOR_RUN);
                    g.draw(new java.awt.geom.Ellipse2D.Double(c.origin.x - (c.gateSize * 0.5), c.origin.y + (i * c.wireSpace) - (c.gateSize * 0.5), c.gateSize, c.gateSize));
                    g.drawString(Integer.toString(bits[i]), (float)(endx - (c.gateSize * 0.25)), (float)(endy + (c.gateSize * 0.25)));
                }
                for (int i = 0; i < c.gates.size(); i++) {
                    IQGate gt = c.gates.get(i);
                    gt.execute(s2);
                    if (parent.groupRunMeasureMethod.isSelected(parent.radioProbRound.getModel())) {
                        bits = s2.rMeasure();
                        endx = c.origin.x + c.excessWire + (i * c.gateSpace) + c.gateSize;
                        for (int j = 0; j < c.bits; j++) {
                            double endy = c.origin.y + (c.wireSpace * j);
                            g.drawString(Integer.toString(bits[j]), (float)(endx - (c.gateSize * 0.25)), (float)(endy + (c.gateSize * 0.25)));
                        }
                    } else if (parent.groupRunMeasureMethod.isSelected(parent.radioProb.getModel())) {
                        double[] dbits = s2.pMeasure();
                        endx = c.origin.x + c.excessWire + (i * c.gateSpace) + c.gateSize;
                        for (int j = 0; j < c.bits; j++) {
                            double endy = c.origin.y + (c.wireSpace * j);
                            g.drawString(nf.format(dbits[j]), (float)(endx - (c.gateSize * 0.25)), (float)(endy + (c.gateSize * 0.25)));
                        }
                    } else if (parent.groupRunMeasureMethod.isSelected(parent.radioFakeMeasure.getModel())) {
                        bits = s2.fakeMeasure();
                        endx = c.origin.x + c.excessWire + (i * c.gateSpace) + c.gateSize;
                        for (int j = 0; j < c.bits; j++) {
                            double endy = c.origin.y + (c.wireSpace * j);
                            g.drawString(Integer.toString(bits[j]), (float)(endx - (c.gateSize * 0.25)), (float)(endy + (c.gateSize * 0.25)));
                        }
                    } else if (parent.groupRunMeasureMethod.isSelected(parent.radioTrueMeasure.getModel())) {
                        bits = s2.trueMeasure();
                        endx = c.origin.x + c.excessWire + (i * c.gateSpace) + c.gateSize;
                        for (int j = 0; j < c.bits; j++) {
                            double endy = c.origin.y + (c.wireSpace * j);
                            g.drawString(Integer.toString(bits[j]), (float)(endx - (c.gateSize * 0.25)), (float)(endy + (c.gateSize * 0.25)));
                        }
                    }
                }//System.out.println(s2.toString());
                //System.out.print("");
            }
        }
//        for (Node n : world.nodes) {
//            //TODO Optimize this.
//            g.draw(new Ellipse2D.Double(n.x - 4, n.y - 4, 8, 8));
//            g.setColor(COLOR_CONNECTION);
//            for (Node c : n.connections) {
//                //TODO Optimize: only draw connection once?
//                g.draw(new java.awt.geom.Line2D.Double(n.x, n.y, c.x, c.y));
//            }
//            g.setColor(COLOR_NODE);
//        }
//        g.setColor(COLOR_SELNODE);
//        for (Node n : selected) {
//            //TODO Optimize this.
//            g.draw(new Ellipse2D.Double(n.x - 4, n.y - 4, 8, 8));
//        }
    }

    public void repaintVP() {
        this.repaint();
    }

    public abstract class CtrlEvent {
        public CtrlEvent() {
            init();
        }
        
        public abstract void init();
        public abstract void addClick(double x, double y);
        public abstract void release();
    }
    
    public CtrlEvent ctrlEvent = null;
    public QCircuit selectedCircuit = null;
    public IQGate selectedGate = null;
    
    public void init() {
        this.addKeyListener(new KeyListener() {

            public void keyTyped(KeyEvent e) {
                switch (Character.toUpperCase(e.getKeyChar())) {
                    case KeyEvent.VK_DELETE:
                        parent.deleteSelected();
                        break;
                    case KeyEvent.VK_C:
                        parent.radioAddCircuit.setSelected(true);
                        break;
                    case KeyEvent.VK_N:
                        parent.radioAddCNot.setSelected(true);
                        break;
                    case KeyEvent.VK_H:
                        parent.radioAddHadamard.setSelected(true);
                        break;
                    case KeyEvent.VK_Z:
                        parent.radioAddPauliZ.setSelected(true);
                        break;
                    case KeyEvent.VK_M:
                        parent.radioAddMatrixGate.setSelected(true);
                        break;
                    case KeyEvent.VK_S:
                        if (!parent.radioSelectCircuit.isSelected()) {
                            parent.radioSelectCircuit.setSelected(true);
                        } else {
                            parent.radioSelectGate.setSelected(true);
                        }
                        break;
                    case KeyEvent.VK_T:
                        if (parent.isTestRun) {
                            parent.radioToggle.setSelected(true);
                        }
                        break;
                    case KeyEvent.VK_P:
                        if (parent.isTestRun) {
                            parent.radioStateProbe.setSelected(true);
                        }
                        break;
                    case KeyEvent.VK_SPACE:
                        repaintVP();
                        break;
                    default:
                        break;
                }
            }

            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_CONTROL) {
                    if (ctrlEvent != null) {
                        ctrlEvent.release();
                        ctrlEvent = null;
                    }
                }
            }

            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_CONTROL) {
                    if (ctrlEvent != null) {
                        ctrlEvent.release();
                    }
                    ctrlEvent = null;
                }
            }
            
        });
        this.addMouseWheelListener(new MouseWheelListener() {

            public void mouseWheelMoved(MouseWheelEvent e) {
                double factor = Math.pow(SCALE_BASE, PRESCALE_FACTOR * e.getWheelRotation());
                //double clickX = (e.getX() - xTrans) / xScale;
                //double clickY = (e.getY() - yTrans) / yScale;
                xScale *= factor;
                yScale *= factor;
                xTrans = e.getX() - ((e.getX() - xTrans) * factor);
                yTrans = e.getY() - ((e.getY() - yTrans) * factor);
                repaintVP();
            }
        });
        this.addMouseListener(new MouseListener() {

            public void mouseClicked(MouseEvent e) {
                QViewport.this.requestFocus();
                final double clickX = (e.getX() - xTrans) / xScale;
                final double clickY = (e.getY() - yTrans) / yScale;
                if (e.getButton() == MouseEvent.BUTTON1) {
                    if (e.isControlDown()) {
                        if (ctrlEvent == null) {
                            if (parent.groupTools.isSelected(parent.radioAddCircuit.getModel())) {
                                ctrlEvent = new CtrlEvent() {
                                    public QCircuit newCircuit;
                                    public QState newState;
                                    
                                    @Override
                                    public void init() {
                                        if (selectedGate != null) {
                                            selectedGate.setSelected(false);
                                            selectedGate = null;
                                            parent.propertiesBox.onSelectedGateChanged();
                                        }
                                        if (selectedCircuit != null) {
                                            selectedCircuit.color = QCircuit.COLOR_UNSELECTED;
                                            selectedCircuit = null;
                                            parent.propertiesBox.onSelectedCircuitChanged();
                                        }
                                        if (parent.currentLoadedCircuit != null) {
                                            parent.currentLoadedCircuit.origin.x = clickX;
                                            parent.currentLoadedCircuit.origin.y = clickY;
                                            if (parent.isTestRun) {                                            
                                                newState = new QState(parent.currentLoadedCircuit.bits);
                                                newState.initZeros();
                                                parent.states.add(newState);
                                            }
                                            parent.circuits.add(parent.currentLoadedCircuit);
                                            parent.currentLoadedCircuit = null;
                                            ctrlEvent = null;
                                            repaintVP();
                                            return;
                                        }
                                        newCircuit = new QCircuit(1, clickX, clickY);
                                        newCircuit.switchRunMode(parent.isTestRun);
                                        parent.circuits.add(newCircuit);                                        
                                        if (parent.isTestRun) {                                            
                                            newState = new QState(newCircuit.bits);
                                            newState.initZeros();
                                            parent.states.add(newState);
                                        }
                                        repaintVP();
                                    }

                                    @Override
                                    public void addClick(double x, double y) {
                                        newCircuit.bits++;
                                        if (parent.isTestRun) {
                                            newState.bits++;
                                            newState.allocInitStates();
                                            newState.initZeros();
                                        }
                                        repaintVP();
                                    }

                                    @Override
                                    public void release() {
                                    }
                                };
                            } else if (parent.groupTools.isSelected(parent.radioAddCNot.getModel())) {
                                ctrlEvent = new CtrlEvent() {
                                    public QCircuit c;
                                    public CNot g;
                                    
                                    @Override
                                    public void init() {
                                        if (selectedGate != null) {
                                            selectedGate.setSelected(false);
                                            selectedGate = null;
                                            parent.propertiesBox.onSelectedGateChanged();
                                        }
                                        selectedCircuit = null;
                                        parent.propertiesBox.onSelectedCircuitChanged();
                                        for (QCircuit c : parent.circuits) {
                                            c.color = QCircuit.COLOR_UNSELECTED;
                                        }
                                        for (QCircuit c : parent.circuits) {
                                            if (c.origin.x <= clickX &&
                                                c.origin.y - (c.gateSize * 0.5) <= clickY &&
                                                c.origin.x + (c.excessWire * 2) + (c.gateSpace * c.gates.size()) >= clickX &&
                                                c.origin.y + (c.wireSpace * (c.bits - 1)) + (c.gateSize * 0.5) >= clickY) {
                                                this.c = c;
                                                c.color = QCircuit.COLOR_SELECTED;
                                                break;
                                            }
                                        }
                                        if (parent.circuits.size() == 1) {
                                            addClick(clickX, clickY);
                                        }
                                        repaintVP();
                                    }

                                    @Override
                                    public void addClick(double x, double y) {
                                        if (c != null) {
                                            if (g == null) {
                                                g = new CNot(new int[]{}, c.bits);
                                                int xIndex = (int)(((x - c.origin.x - c.excessWire) / c.gateSpace) + 1);
                                                int yIndex = (int)(((y - c.origin.y) / c.wireSpace) + 0.5);
                                                if (xIndex < 0)
                                                    xIndex = 0;
                                                else if (xIndex > c.gates.size())
                                                    xIndex = c.gates.size();
                                                if (yIndex < 0)
                                                    yIndex = 0;
                                                else if (yIndex >= c.bits)
                                                    yIndex = c.bits - 1;
                                                g.bits = new int[]{yIndex};
                                                c.gates.add(xIndex, g);
                                            } else {
                                                int yIndex = (int)(((y - c.origin.y) / c.wireSpace) + 0.5);
                                                if (yIndex < 0)
                                                    yIndex = 0;
                                                else if (yIndex >= c.bits)
                                                    yIndex = c.bits - 1;
                                                for (int i = 0; i < g.bits.length; i++) {
                                                    //TODO Maybe remove nodes?
                                                    if (g.bits[i] == yIndex)
                                                        return;
                                                }
                                                g.bits = Arrays.copyOf(g.bits, g.bits.length + 1);
                                                g.bits[g.bits.length - 1] = yIndex;
                                                //MainTest.printBitString(g.bits);
                                            }
                                            repaintVP();
                                        } else {
                                            //System.out.println("c is null!");
                                        }
                                    }

                                    @Override
                                    public void release() {
                                        if (c != null) {
                                            c.color = QCircuit.COLOR_UNSELECTED;
                                            repaintVP();
                                        }
                                    }
                                };
                            } else if (parent.groupTools.isSelected(parent.radioAddHadamard.getModel())) {
                                ctrlEvent = new CtrlEvent() {
                                    public QCircuit c;
                                    public Hadamard g;
                                    
                                    @Override
                                    public void init() {
                                        if (selectedGate != null) {
                                            selectedGate.setSelected(false);
                                            selectedGate = null;
                                            parent.propertiesBox.onSelectedGateChanged();
                                        }
                                        selectedCircuit = null;
                                        parent.propertiesBox.onSelectedCircuitChanged();
                                        for (QCircuit c : parent.circuits) {
                                            c.color = QCircuit.COLOR_UNSELECTED;
                                        }
                                        for (QCircuit c : parent.circuits) {
                                            if (c.origin.x <= clickX &&
                                                c.origin.y - (c.gateSize * 0.5) <= clickY &&
                                                c.origin.x + (c.excessWire * 2) + (c.gateSpace * c.gates.size()) >= clickX &&
                                                c.origin.y + (c.wireSpace * (c.bits - 1)) + (c.gateSize * 0.5) >= clickY) {
                                                this.c = c;
                                                c.color = QCircuit.COLOR_SELECTED;
                                                break;
                                            }
                                        }
                                        if (parent.circuits.size() == 1) {
                                            addClick(clickX, clickY);
                                        }
                                        repaintVP();
                                    }

                                    @Override
                                    public void addClick(double x, double y) {
                                        if (c != null) {
                                            g = new Hadamard(0, c.bits);
                                            int xIndex = (int) (((x - c.origin.x - c.excessWire) / c.gateSpace) + 1);
                                            int yIndex = (int) (((y - c.origin.y) / c.wireSpace) + 0.5);
                                            if (xIndex < 0) {
                                                xIndex = 0;
                                            } else if (xIndex > c.gates.size()) {
                                                xIndex = c.gates.size();
                                            }
                                            if (yIndex < 0) {
                                                yIndex = 0;
                                            } else if (yIndex >= c.bits) {
                                                yIndex = c.bits - 1;
                                            }
                                            g.bit = yIndex;
                                            c.gates.add(xIndex, g);
                                            repaintVP();
                                        } else {
                                            //System.out.println("c is null!");
                                        }
                                    }

                                    @Override
                                    public void release() {
                                        if (c != null) {
                                            c.color = QCircuit.COLOR_UNSELECTED;
                                            repaintVP();
                                        }
                                    }
                                };
                            } else if (parent.groupTools.isSelected(parent.radioAddPauliZ.getModel())) {
                                ctrlEvent = new CtrlEvent() {
                                    public QCircuit c;
                                    public PauliZ g;
                                    
                                    @Override
                                    public void init() {
                                        if (selectedGate != null) {
                                            selectedGate.setSelected(false);
                                            selectedGate = null;
                                            parent.propertiesBox.onSelectedGateChanged();
                                        }
                                        selectedCircuit = null;
                                        parent.propertiesBox.onSelectedCircuitChanged();
                                        for (QCircuit c : parent.circuits) {
                                            c.color = QCircuit.COLOR_UNSELECTED;
                                        }
                                        for (QCircuit c : parent.circuits) {
                                            if (c.origin.x <= clickX &&
                                                c.origin.y - (c.gateSize * 0.5) <= clickY &&
                                                c.origin.x + (c.excessWire * 2) + (c.gateSpace * c.gates.size()) >= clickX &&
                                                c.origin.y + (c.wireSpace * (c.bits - 1)) + (c.gateSize * 0.5) >= clickY) {
                                                this.c = c;
                                                c.color = QCircuit.COLOR_SELECTED;
                                                break;
                                            }
                                        }
                                        if (parent.circuits.size() == 1) {
                                            addClick(clickX, clickY);
                                        }
                                        repaintVP();
                                    }

                                    @Override
                                    public void addClick(double x, double y) {
                                        if (c != null) {
                                            g = new PauliZ(0, c.bits);
                                            int xIndex = (int) (((x - c.origin.x - c.excessWire) / c.gateSpace) + 1);
                                            int yIndex = (int) (((y - c.origin.y) / c.wireSpace) + 0.5);
                                            if (xIndex < 0) {
                                                xIndex = 0;
                                            } else if (xIndex > c.gates.size()) {
                                                xIndex = c.gates.size();
                                            }
                                            if (yIndex < 0) {
                                                yIndex = 0;
                                            } else if (yIndex >= c.bits) {
                                                yIndex = c.bits - 1;
                                            }
                                            g.bit = yIndex;
                                            c.gates.add(xIndex, g);
                                            repaintVP();
                                        } else {
                                            //System.out.println("c is null!");
                                        }
                                    }

                                    @Override
                                    public void release() {
                                        if (c != null) {
                                            c.color = QCircuit.COLOR_UNSELECTED;
                                            repaintVP();
                                        }
                                    }
                                };
                            } else if (parent.groupTools.isSelected(parent.radioAddMatrixGate.getModel())) {
                                ctrlEvent = new CtrlEvent() {
                                    public QCircuit c;
                                    public MatrixGate g;
                                    
                                    @Override
                                    public void init() {
                                        if (selectedGate != null) {
                                            selectedGate.setSelected(false);
                                            selectedGate = null;
                                            parent.propertiesBox.onSelectedGateChanged();
                                        }
                                        selectedCircuit = null;
                                        parent.propertiesBox.onSelectedCircuitChanged();
                                        for (QCircuit c : parent.circuits) {
                                            c.color = QCircuit.COLOR_UNSELECTED;
                                        }
                                        for (QCircuit c : parent.circuits) {
                                            if (c.origin.x <= clickX &&
                                                c.origin.y - (c.gateSize * 0.5) <= clickY &&
                                                c.origin.x + (c.excessWire * 2) + (c.gateSpace * c.gates.size()) >= clickX &&
                                                c.origin.y + (c.wireSpace * (c.bits - 1)) + (c.gateSize * 0.5) >= clickY) {
                                                this.c = c;
                                                c.color = QCircuit.COLOR_SELECTED;
                                                break;
                                            }
                                        }
                                        if (parent.circuits.size() == 1) {
                                            addClick(clickX, clickY);
                                        }
                                        repaintVP();
                                    }

                                    @Override
                                    public void addClick(double x, double y) {
                                        if (c != null) {
                                            if (parent.currentLoadedGate != null) {
                                                IQGate qg = parent.currentLoadedGate.copy();
                                                int xIndex = (int) (((x - c.origin.x - c.excessWire) / c.gateSpace) + 1);
                                                if (xIndex < 0) {
                                                    xIndex = 0;
                                                } else if (xIndex > c.gates.size()) {
                                                    xIndex = c.gates.size();
                                                }
                                                c.gates.add(xIndex, qg);
                                                repaintVP();
                                            } else if (parent.currentGateMatrix != null) {
                                                g = new MatrixGate(parent.currentGateMatrix, parent.matrixBits);
                                                int xIndex = (int) (((x - c.origin.x - c.excessWire) / c.gateSpace) + 1);
                                                if (xIndex < 0) {
                                                    xIndex = 0;
                                                } else if (xIndex > c.gates.size()) {
                                                    xIndex = c.gates.size();
                                                }
                                                c.gates.add(xIndex, g);
                                                repaintVP();
                                            }
                                        } else {
                                            //System.out.println("c is null!");
                                        }
                                    }

                                    @Override
                                    public void release() {
                                        if (c != null) {
                                            c.color = QCircuit.COLOR_UNSELECTED;
                                            repaintVP();
                                        }
                                    }
                                };
                            } else if (parent.groupTools.isSelected(parent.radioToggle.getModel())) {
                            } else if (parent.groupTools.isSelected(parent.radioSelectCircuit.getModel())) {
                            } else if (parent.groupTools.isSelected(parent.radioSelectGate.getModel())) {
                            } else if (parent.groupTools.isSelected(parent.radioStateProbe.getModel())) {
                                //TODO Maybe have ctrl select circuit first, otherwise go straight?
                            } else {
                            }
                        } else {
                            ctrlEvent.addClick(clickX, clickY);
                        }
                    } else {
                        if (parent.groupTools.isSelected(parent.radioToggle.getModel())) {
                            if (parent.isTestRun) {
                                boolean done = false;
                                for (int ci = 0; ci < parent.circuits.size(); ci++) {
                                    QCircuit c = parent.circuits.get(ci);
                                    double endx = c.origin.x;
                                    for (int i = 0; i < c.bits; i++) {
                                        double endy = c.origin.y + (c.wireSpace * i);
                                        if (QUtils.dist(clickX, clickY, endx, endy) <= (c.gateSize * 0.5)) {
                                            CNot.execute(parent.states.get(ci), new int[]{i});
                                            done = true;
                                            break;
                                        }
                                    }
                                    if (done)
                                        break;
                                }
                                if (done)
                                    repaintVP();
                            }
                        } else if (parent.groupTools.isSelected(parent.radioSelectCircuit.getModel())) {
                            if (selectedCircuit != null) {
                                selectedCircuit.color = QCircuit.COLOR_UNSELECTED;
                                selectedCircuit = null;
                                parent.propertiesBox.onSelectedCircuitChanged();
                            }
                            if (selectedGate != null) {
                                selectedGate.setSelected(false);
                                selectedGate = null;
                                parent.propertiesBox.onSelectedGateChanged();
                            }
                            for (QCircuit c : parent.circuits) {
                                if (c.origin.x <= clickX
                                        && c.origin.y - (c.gateSize * 0.5) <= clickY
                                        && c.origin.x + (c.excessWire * 2) + (c.gateSpace * c.gates.size()) >= clickX
                                        && c.origin.y + (c.wireSpace * (c.bits - 1)) + (c.gateSize * 0.5) >= clickY) {
                                    selectedCircuit = c;
                                    parent.propertiesBox.onSelectedCircuitChanged();
                                    parent.propertiesBox.showCircuit(selectedCircuit);
                                    c.color = QCircuit.COLOR_SELECTED;
                                    break;
                                }
                            }
                            repaintVP();
                        } else if (parent.groupTools.isSelected(parent.radioSelectGate.getModel())) {
                            if (selectedGate != null) {
                                selectedGate.setSelected(false);
                                selectedGate = null;
                                parent.propertiesBox.onSelectedGateChanged();
                            }
                            if (selectedCircuit != null) {
                                int xIndex = (int)(((clickX - selectedCircuit.origin.x - selectedCircuit.excessWire) / selectedCircuit.gateSpace) + 0.5);
//                                int yIndex = (int)(((clickY - selectedCircuit.origin.y) / selectedCircuit.wireSpace) + 0.5);
                                if (xIndex < 0) {
                                    xIndex = 0;
                                } else if(xIndex >= selectedCircuit.gates.size()) {
                                    xIndex = selectedCircuit.gates.size() - 1;
                                }
//                                if (yIndex < 0) {
//                                    yIndex = 0;
//                                } else if (yIndex >= selectedCircuit.bits) {
//                                    yIndex = selectedCircuit.bits - 1;
//                                }
                                selectedCircuit.gates.get(xIndex).setSelected(true);
                                selectedGate = selectedCircuit.gates.get(xIndex);
                                parent.propertiesBox.onSelectedGateChanged();
                                parent.propertiesBox.showGate(selectedGate);
                            }
                            repaintVP();
                        } else if (parent.groupTools.isSelected(parent.radioStateProbe.getModel())) {
                            if (selectedCircuit != null) {
                                selectedCircuit.color = QCircuit.COLOR_UNSELECTED;
                                selectedCircuit = null;
                                parent.propertiesBox.onSelectedCircuitChanged();
                            }
                            if (selectedGate != null) {
                                selectedGate.setSelected(false);
                                selectedGate = null;
                                parent.propertiesBox.onSelectedGateChanged();
                            }
                            for (QCircuit c : parent.circuits) {
                                if (c.origin.x <= clickX
                                        && c.origin.y - (c.gateSize * 0.5) <= clickY
                                        && c.origin.x + (c.excessWire * 2) + (c.gateSpace * c.gates.size()) >= clickX
                                        && c.origin.y + (c.wireSpace * (c.bits - 1)) + (c.gateSize * 0.5) >= clickY) {
                                    selectedCircuit = c;
                                    parent.propertiesBox.onSelectedCircuitChanged();
                                    c.color = QCircuit.COLOR_SELECTED;
                                    break;
                                }
                            }
                            if (selectedCircuit != null) {
                                int xIndex = ((int)(((clickX - selectedCircuit.origin.x - selectedCircuit.excessWire) / selectedCircuit.gateSpace) + 1)) - 1;
//                                int yIndex = (int)(((clickY - selectedCircuit.origin.y) / selectedCircuit.wireSpace) + 0.5);
                                if (xIndex < 0) {
                                    xIndex = -1;
                                } else if(xIndex >= selectedCircuit.gates.size()) {
                                    xIndex = selectedCircuit.gates.size() - 1;
                                }
//                                if (yIndex < 0) {
//                                    yIndex = 0;
//                                } else if (yIndex >= selectedCircuit.bits) {
//                                    yIndex = selectedCircuit.bits - 1;
//                                }
                                if (xIndex > -1) {
                                    selectedCircuit.gates.get(xIndex).setSelected(true);
                                    selectedGate = selectedCircuit.gates.get(xIndex);
                                    parent.propertiesBox.onSelectedGateChanged();
                                }
                                
                                QCircuit c = selectedCircuit;
                                QState s = parent.states.get(parent.circuits.indexOf(c));
                                QState s2 = s.copy();
                                for (int i = 0; i <= xIndex; i++) {
                                    IQGate gt = c.gates.get(i);
                                    gt.execute(s2);
                                }
                                parent.propertiesBox.showState(s2);
                            }
                            repaintVP();
                        } else {
                        }
                    }
//                    if (e.getClickCount() > 1) {
//                    } else {
//                    }
                } else if (e.getButton() == MouseEvent.BUTTON3) {
//                    JPopupMenu menu = new JPopupMenu();
//                    JMenuItem mitemAddCircuit = new JMenuItem("Add Circuit");
//                    JMenuItem mitemAddCNot = new JMenuItem("Add CNot");
//                    mitemAddCircuit.addActionListener(new ActionListener() {
//                        public void actionPerformed(ActionEvent e) {
//                            parent.circuits.add(new QCircuit(4, clickX, clickY));
//                            repaintVP();
//                        }
//                    });
//                    mitemAddCNot.addActionListener(new ActionListener() {
//                        public void actionPerformed(ActionEvent e) {
//                            QCircuit c = parent.circuits.get(0);
//                            c.gates.add(new CNot(new int[]{1,2,3}));
//                            repaintVP();
//                        }
//                    });
//                    menu.add(mitemAddCircuit);
//                    menu.add(mitemAddCNot);
////                    if (selected.size() == 2) {
////                        menu.add(mitemToggleConnection);
////                    }
//                    menu.show(QViewport.this, e.getX(), e.getY());
                }
            }

            public void mousePressed(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON1) {
                    mouseWasX = e.getX();
                    mouseWasY = e.getY();
                }
            }

            public void mouseReleased(MouseEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            public void mouseEntered(MouseEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            public void mouseExited(MouseEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }
        });
        this.addMouseMotionListener(new MouseMotionListener() {

            public void mouseDragged(MouseEvent e) {
                xTrans += e.getX() - mouseWasX;
                yTrans += e.getY() - mouseWasY;
                mouseWasX = e.getX();
                mouseWasY = e.getY();
                repaintVP();
            }

            public void mouseMoved(MouseEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }
        });
    }
}
